using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using FOCommon.Dialog;
using FOCommon.WMLocation;

namespace WorldEditor
{
    public partial class frmGenerateDefines : Form
    {
        WorldMap World;

        public frmGenerateDefines(WorldMap World)
        {
            this.World = World;
            InitializeComponent();
        }

        private string ReplaceMapsDefinesCharacter(String Text)
        {
            Text = Text.Replace(" ", "");
            Text = Text.Replace(":", "_");
            Text = Text.Replace("'", "");
            Text = Text.Replace("-", "_");
            Text = Text.Replace("/", "");
            Text = Text.Replace("!", "");
            Text = Text.Replace("\"", "");
            Text = Text.Replace("(", "_");
            Text = Text.Replace(")", "_");
            Text = Text.Replace( "?", "_" );
            Text = Text.Replace( ".", "_" );
            Text = Text.Replace( ",", "_" );
            return Text;
        }

        private string GetMapComment(Map Map)
        {
            String Parent="";
            List<Location> Locations = World.GetLocations();
            foreach (Location Loc in Locations)
                foreach (Map LocMap in Loc.Maps)
                    if (LocMap.Pid == Map.Pid)
                        Parent = Loc.Name+"("+Loc.Pid+")";

            return Map.FileName + ", " +
                (!String.IsNullOrEmpty(Map.ScriptName) ? Map.ScriptName + ", " : "") +
                 Parent;
        }

        private string GetHeader()
        {
            return "// This file was autogenerated by WorldEditor on " + DateTime.Now + ", don't modify it manually.";
        }

        private void btnGenerate_Click(object sender, EventArgs e)
        {
            if (chkMaps.Checked)
            {
                List<String> MapDefines = new List<String>();
                List<String> LocDefines = new List<String>();

                List<Map> Maps = World.MapParser.GetMaps();
                Maps = Maps.OrderBy(x => x.Pid).ToList<Map>();
                List<Location> Locations = World.GetLocations();
                Locations = Locations.OrderBy(x => x.Pid).ToList<Location>();
                List<String> MapsLines = new List<string>();
                MapsLines.Add("#ifndef __MAPS__");
                MapsLines.Add("#define __MAPS__");
                MapsLines.Add("");
                MapsLines.Add(GetHeader());
                MapsLines.Add("");
                MapsLines.Add("//************************************************************************/");
                MapsLines.Add("//* " + Locations.Count + " Locations                                                        */");
                MapsLines.Add("//************************************************************************/");
                foreach (Location Loc in Locations)
                {
                    String LocName = ReplaceMapsDefinesCharacter(Loc.Name);
                    bool UsePid=false;
                    if (LocDefines.Contains(LocName))
                        UsePid = true;
                    MapsLines.Add("#define LOCATION_" + Utils.GetSpacedLine(LocName + (UsePid ? Loc.Pid.ToString() : ""), "(" + Loc.Pid + ") // " + Loc.WorldMapDescription, 40));
                    LocDefines.Add(LocName);
                }
                MapsLines.Add("");
                MapsLines.Add("//************************************************************************/");
                MapsLines.Add("//*  " + Maps.Count + " Maps                                                            */");
                MapsLines.Add("//************************************************************************/");
                MapsLines.Add(Utils.GetSpacedLine("","// FileName, Script, Parent Location", 63));
                foreach (Map Map in Maps)
                {
                    bool UsePid = false;
                    string MapName = ReplaceMapsDefinesCharacter(Map.Name);
                    if (MapDefines.Contains(MapName))
                        UsePid = true;
                    MapsLines.Add("#define MAP_" + Utils.GetSpacedLine(MapName + (UsePid ? Map.Pid.ToString() : ""), "(" + Map.Pid + ") // " + GetMapComment(Map), 45));
                    MapDefines.Add(MapName);
                }
                MapsLines.Add("");
                if( chkEnum.Checked )
                {
                    int enumCurrent = 0;
                    int lastValue = -1;
                    List<string> LocationEnums = new List<string>();
                    MapsLines.Add( "shared enum LOCATIONS" );
                    MapsLines.Add( "{" );
                    foreach( Location loc in Locations )
                    {
                        enumCurrent++;
                        string name = ReplaceMapsDefinesCharacter( loc.Name );
                        bool usePid = LocationEnums.Contains( name );
                        MapsLines.Add( "\tLOCATION__" + name + (usePid ? loc.Pid.ToString() : "") + (loc.Pid == lastValue + 1 ? "" : " = " + loc.Pid) + (enumCurrent != Locations.Count ? "," : "") );
                        lastValue = loc.Pid;
                        LocationEnums.Add( name );
                    }
                    MapsLines.Add( "};" );
                    MapsLines.Add( "" );
                    List<String> MapEnums = new List<String>();
                    MapsLines.Add( "shared enum MAPS" );
                    MapsLines.Add( "{" );
                    enumCurrent = 0;
                    lastValue = -1;
                    foreach( Map Map in Maps )
                    {
                        enumCurrent++;
                        string name = ReplaceMapsDefinesCharacter( Map.Name );
                        bool usePid = MapEnums.Contains( name );
                        MapsLines.Add( "\tMAP__" + name + (usePid ? Map.Pid.ToString() : "") + (Map.Pid == lastValue + 1 ? "" : " = " + Map.Pid) + (enumCurrent != Maps.Count ? "," : "") );
                        lastValue = Map.Pid;
                        MapEnums.Add( name );
                    }
                    MapsLines.Add( "};" );
                    MapsLines.Add( "" );
                }
                MapsLines.Add( "#endif // __MAPS__" );
                File.WriteAllLines(Config.PathScriptsDir + "_maps.fos", MapsLines.ToArray());

                Message.Show("Defines generated and saved to _maps.fos", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            if (chkDialogs.Checked)
            {
                List<String> DlgDefines = new List<string>();
                DlgDefines.Add("#ifndef __DIALOGS__");
                DlgDefines.Add("#define __DIALOGS__");
                DlgDefines.Add("");
                DlgDefines.Add(GetHeader());
                DlgDefines.Add("// Generated " + World.DialogListParser.GetDialogs(true).Count + " dialog defines (only enabled ones).");
                DlgDefines.Add("#define DIALOG_" + Utils.GetSpacedLine("default", "(1)", 35));
                List<ListDialog> dialogs = World.DialogListParser.GetDialogs( true );
                int dialogsCount = dialogs.Count;
                foreach( ListDialog Dlg in dialogs )
                {
                    string name = ReplaceMapsDefinesCharacter( Dlg.Name );
                    DlgDefines.Add("#define DIALOG_" + Utils.GetSpacedLine(name, "("+ Dlg.Id +")", 35));
                }
                DlgDefines.Add("");

                if( chkEnum.Checked )
                {
                    DlgDefines.Add( "shared enum DIALOGS" );
                    DlgDefines.Add( "{" );
                    int enumCurrent = 0;
                    int lastValue = -1;
                    foreach( ListDialog Dlg in dialogs )
                    {
                        enumCurrent++;
                        string name = ReplaceMapsDefinesCharacter( Dlg.Name );
                        DlgDefines.Add( "\tDIALOG__" + name + (Dlg.Id == lastValue + 1 ? "" : " = " + Dlg.Id) + (enumCurrent != dialogsCount ? "," : "") );
                        lastValue = Dlg.Id;
                    }
                    DlgDefines.Add( "};" );
                    DlgDefines.Add( "" );
                }
                DlgDefines.Add("#endif // __DIALOGS__");
                File.WriteAllLines(Config.PathScriptsDir + "_dialogs.fos", DlgDefines.ToArray());

                Message.Show("Defines generated and saved to _dialogs.fos", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            if (chkNpcPids.Checked)
            {
                List<String> NpcsAdded = new List<string>();

                List<String> NpcPidDefines = new List<string>();
                NpcPidDefines.Add("#ifndef __NPC_PIDS__");
                NpcPidDefines.Add("#define __NPC_PIDS__");
                NpcPidDefines.Add("");
                NpcPidDefines.Add(GetHeader());
                NpcPidDefines.Add("// Generated " + ProtoEditor.ProtoManager.Protos.Count + " defines.");

                List<ProtoEditor.ProtoCritter> Crits = ProtoEditor.ProtoManager.Protos.Values.OrderBy( x => x.Id ).ToList<ProtoEditor.ProtoCritter>();
                foreach (ProtoEditor.ProtoCritter Crit in Crits)
                {
                    string NpcName = ReplaceMapsDefinesCharacter(Crit.Name);
                    if (String.IsNullOrEmpty(NpcName))
                        NpcName = "Unknown";
                    if(NpcsAdded.Contains(NpcName))
                    {
                        int i=1;
                        do
                        {
                            
                        } while (NpcsAdded.Contains(NpcName + ++i));
                        NpcName = NpcName + i;
                    }

                    NpcPidDefines.Add("#define NPC_PID_" + Utils.GetSpacedLine(NpcName, "(" + Crit.Id + ") // " + Crit.Desc, 45));
                    NpcsAdded.Add(NpcName);
                }
                NpcPidDefines.Add("");
                if( chkEnum.Checked )
                {
                    List<string> NpcEnums = new List<string>();
                    int npcCount = Crits.Count;
                    int enumCurrent = 0;
                    int lastValue = -1;

                    NpcPidDefines.Add( "shared enum NPC_PIDS" );
                    NpcPidDefines.Add( "{" );
                    foreach(ProtoEditor.ProtoCritter Crit in Crits)
                    {
                        enumCurrent++;
                        string name = ReplaceMapsDefinesCharacter( Crit.Name );
                        if( string.IsNullOrEmpty( name ) )
                            name = "Unknown";
                        if( NpcEnums.Contains( name ) )
                        {
                            int i = 1;
                            do
                            { }
                            while( NpcEnums.Contains( name + ++i ) );
                            name = name + i;
                        }

                        NpcPidDefines.Add("\tNPC_PID__"+name + (Crit.Id == lastValue + 1 ? "" : " = "+Crit.Id)+(enumCurrent != npcCount ? "," : ""));
                        NpcEnums.Add( name );
                        lastValue = Crit.Id;
                    }
                    NpcPidDefines.Add( "};" );
                    NpcPidDefines.Add( "" );
                }
                NpcPidDefines.Add("#endif __NPC_PIDS__");
                File.WriteAllLines(Config.PathScriptsDir + "_npc_pids.fos", NpcPidDefines.ToArray());
                Message.Show("Defines generated and saved to _npc_pids.fos", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}
